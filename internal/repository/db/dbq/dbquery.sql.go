// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: dbquery.sql

package dbq

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (id, name) VALUES (?, ?) RETURNING id, name, created, updated
`

type CreateAuthorParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.ID, arg.Name)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createBook = `-- name: CreateBook :one
INSERT INTO books (id, title, author_id) VALUES (?, ?, ?) RETURNING id, title, author_id, created, updated
`

type CreateBookParams struct {
	ID       string
	Title    string
	AuthorID sql.NullString
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.ID, arg.Title, arg.AuthorID)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books WHERE id = ?
`

func (q *Queries) DeleteBook(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const listBooks = `-- name: ListBooks :many
SELECT id, title, author_id, created, updated FROM books
`

func (q *Queries) ListBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.AuthorID,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
